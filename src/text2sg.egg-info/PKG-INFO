Metadata-Version: 2.4
Name: text2sg
Version: 0.1.0
Summary: Text to Scene Graph Generator - A unified CLI tool for generating scene graphs from text descriptions
Home-page: https://github.com/your-org/text2sg
Author: COMP5703 Team
Author-email: Data Annotator Team <team@example.com>
Project-URL: Homepage, https://github.com/your-org/text2sg
Project-URL: Repository, https://github.com/your-org/text2sg
Project-URL: Issues, https://github.com/your-org/text2sg/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Text Processing :: Linguistic
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: typer[all]>=0.9.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: requests>=2.28.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: rich>=13.0.0
Requires-Dist: pandas>=1.5.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# Text2SG - Text to Scene Graph Generation Tool

一个强大的文本到场景图生成工具，支持CSV数据处理、多行JSON修复、场景图生成和完整的数据处理管道。

## 功能特性

- 🔧 **CSV格式化**：将原始CSV转换为标注格式，支持自定义提示模板
- 📊 **列提取**：从CSV文件中提取指定列，支持灵活的列处理策略
- 🛠️ **JSON修复**：自动修复CSV中的多行JSON格式问题
- 🤖 **场景图生成**：使用Google Gemini API生成高质量场景图
- ⚡ **完整管道**：一键运行完整的文本到场景图处理流程
- 🖥️ **命令行界面**：直观的CLI工具，支持批处理和自动化
- 📝 **配置管理**：灵活的配置系统，支持环境变量和配置文件
- 🧪 **全面测试**：完整的单元测试覆盖，确保代码质量

## 数据格式

### 输入CSV格式

基本的输入CSV文件应包含：
- `input` - 原始输入文本（可自定义列名）
- 其他列会被保留并传递到输出文件

### 场景图JSON格式

生成的场景图采用标准化JSON格式：

```json
{
  "objects": ["person", "table", "chair"],
  "attributes": {
    "person": ["tall", "wearing_hat"],
    "table": ["wooden", "round"],
    "chair": ["metal", "blue"]
  },
  "relationships": [
    ["person", "sits_on", "chair"],
    ["chair", "next_to", "table"]
  ]
}
```

### 输出CSV格式

处理后的CSV文件包含：
- 原始输入列
- `output` - 生成的场景图JSON（可自定义列名）
- 所有原始列都会被保留

## 安装和设置

### 前置要求

- Python 3.8+
- Google AI API密钥（用于场景图生成）

### 安装方式

#### 方式1：从源码安装

```bash
# 克隆仓库
git clone <repository-url>
cd data_annotator

# 安装依赖
pip install -r requirements.txt

# 安装为可编辑包
pip install -e .
```

#### 方式2：使用setup.py安装

```bash
# 安装包
python setup.py install
```

### 配置设置

#### 环境变量配置

创建 `.env` 文件：

```bash
# Google AI API配置
GOOGLE_AI_API_KEY=your_api_key_here
GOOGLE_AI_MODEL=gemini-1.5-flash
GOOGLE_AI_TEMPERATURE=0.3

# 处理配置
BATCH_SIZE=10
MAX_RETRIES=3

# 路径配置
INPUT_DIR=./data/input
OUTPUT_DIR=./data/output
BACKUP_DIR=./data/backup

# 日志配置
LOG_LEVEL=INFO
LOG_FORMAT=structured
```

#### 配置文件

也可以使用 `config.yaml` 文件：

```yaml
api:
  google_ai_api_key: "your_api_key_here"
  model: "gemini-1.5-flash"
  temperature: 0.3

processing:
  batch_size: 10
  max_retries: 3
  timeout: 30

paths:
  input_dir: "./data/input"
  output_dir: "./data/output"
  backup_dir: "./data/backup"

logging:
  level: "INFO"
  format: "structured"
```

## 使用说明

1. **加载文件**：在页面顶部输入CSV文件的完整路径，点击"加载文件"按钮

2. **查看数据**：
   - 上方显示当前样本的输入文本
   - 中间显示场景图的可视化（按时间分组）
   - 右侧提供JSON编辑器进行直接编辑

3. **编辑标注**：
   - 修改输入文本
   - 在JSON编辑器中编辑场景图
   - 切换"是否合理"和"已标注"开关

4. **保存和导航**：
   - 点击"保存"按钮保存修改
   - 使用"上一条"/"下一条"按钮导航
   - 查看标注进度统计

## API接口

### 后端API

- `POST /open` - 打开CSV文件
- `GET /row?index=N` - 根据索引获取行
- `GET /row/{id}` - 根据ID获取行
- `PUT /row/{id}` - 更新行数据
- `GET /progress` - 获取标注进度
- `GET /rows` - 获取所有行的基本信息

## 项目结构

```
data_annotator/
├── backend/
│   ├── app.py              # Flask应用主文件
│   ├── csv_handler.py      # CSV处理模块
│   └── requirements.txt    # Python依赖
├── frontend/
│   ├── src/
│   │   ├── App.vue        # 主应用组件
│   │   ├── main.js        # 应用入口
│   │   └── style.css      # 样式文件
│   ├── index.html         # HTML模板
│   ├── package.json       # 项目配置
│   └── vite.config.js     # Vite配置
├── unmarked_dataset.csv   # 示例数据文件
└── README.md             # 项目文档
```

## 文档

### 完整文档
- [使用示例](docs/usage_examples.md) - 详细的使用示例和最佳实践
- [迁移指南](docs/migration_guide.md) - 从其他工具迁移到Text2SG的指南
- [API参考](docs/api_reference.md) - 完整的API接口文档

### 开发说明

#### 数据验证

应用包含多层数据验证：
- 前端实时JSON格式验证
- 后端完整数据结构验证
- 场景图节点和边的引用完整性检查

#### 备份机制

每次保存时会自动创建备份文件，格式为：
`原文件名.backup_YYYYMMDD_HHMMSS`

#### 错误处理

- 友好的错误提示信息
- 自动错误恢复机制
- 详细的日志记录

## 故障排除

### 常见问题

1. **文件路径错误**：确保使用完整的绝对路径
2. **端口冲突**：检查5000和3000端口是否被占用
3. **依赖安装失败**：尝试使用虚拟环境或更新包管理器

### 日志查看

- 后端日志：查看终端输出
- 前端日志：打开浏览器开发者工具

## 许可证

本项目仅用于学术研究目的。
